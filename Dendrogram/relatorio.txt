Para executar o programa faça "python main.py nome_do_arquivo_de_teste", caso nenhum arquivo de teste seja dado, "iris2d.data" será assumido.

Como métrica de distância foi utilizado o "simple", que pode ser facilmente modificado para o "complete" ou "mean", modificando-se alguns parâmetros da função "merge".
Seria possível de se fazer o trabalho inteiro usando 4 linhas se fosse usado os algoritmos prontos da biblioteca matplot, mas claro que no lugar disto, os algoritmos necessários foram todos implementados pelo aluno, e uso a biblioteca apenas para exibir a imagem propriamente dita, no entanto deixei este source que usa apenas a biblioteca com o nome de "working_example.py", para que possa ser possível de se verificar a corretude do algoritmo feito contra o algoritmo implementado na biblioteca.

Uma coisa interessante é que o desenho dendrograma produzido é exatamente o mesmo caso os dados sejam "bem comportados" passando os pontos pela estandartização ou não, sendo diferente apenas os valores absolutos do eixo y (distâncias em que eles sofreram merge). Com isto fica evidenciado que o processo de estandardização não deforma o dengrograma, a não ser que as coordenadas dos pontos sejam de magnitude muito diferentes (com o x variando entre 0 e 1 enquanto o y varia entre -213123 a +434332, por exemplo).

Para encontrar o "ponto de corte ótimo" primeiramente é importante notar que isto nem sequer existe. Ponto de corte ótimo depende do propósito do dentrograma e do que o usuário quer. Mesmo com isto em mente, existem vários algoritmos diferentes para encontrar este ponto, levando em consideração vários fatores como por exemplo o número de filhos que cada nodo possui, a distância (altura) em que eles se unem, e até mesmo um parâmetro de penalização por cada nível descido. Li alguns que pareciam interessantes no entanto no trabalho apenas é dito "implemente algum algoritmo" e portanto fiz um bastante simples, que apenas procura a maior "lacuna" entre a junção duas sub-árvores.
Aparentemente o dentrograma desenhado já mostra implicitamente um "ponto de corte ótimo" usando um algoritmo próprio (e diferente do meu), de modo que ele colore diferente as regiões do dentrograma.
Para cortar o dentrograma eu apenas imprimo na tela a coordenada y em que meu algoritmo encontrou o ponto de corte, já que eu não sabia como desenhar a linha de corte.
